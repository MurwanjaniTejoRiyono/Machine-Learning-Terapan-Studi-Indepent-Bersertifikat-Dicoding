# -*- coding: utf-8 -*-
"""Sistem Rekomendasi Movie.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Axy_UWpfmiCLiSoDgrylhvkmfJZ7PuOi
"""

# Import library
import pandas as pd
import zipfile
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

#Confirm API kaggle
from google.colab import files
files.upload()

#Install kaggle dan download dataset dari kaggle
!pip install -q kaggle
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download -d stefanoleone992/imdb-extensive-dataset

"""1. Exploratory Data"""

# Load Data
# Variable local_zip berisi direktori lokasi file zip disimpan
local_zip = '/content/imdb-extensive-dataset.zip'

#Proses ekstrak file zip
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content/imdb-extensive-dataset')
zip_ref.close()

#Membaca dataset yang digunakan
imdb_movies = pd.read_csv ('/content/imdb-extensive-dataset/IMDb movies.csv')
imdb_rating = pd.read_csv ('/content/imdb-extensive-dataset/IMDb ratings.csv')

#Melihat isi dataset imdb_movies
imdb_movies

"""2. Data Preparation"""

# Melakukan penghapusan beberapa kolom yang tidak digunakan
columns = ['original_title',
           'year',
           'date_published',
           'duration',
           'country',
           'language',
           'director',
           'writer',
           'production_company',
           'actors',
           'description',
           'avg_vote',
           'votes',	
           'budget',
           'usa_gross_income',
           'worlwide_gross_income',
           'metascore',
           'reviews_from_users',
           'reviews_from_critics']
imdb_movies.drop(columns, inplace=True, axis=1)

imdb_movies

# Pengecekan dataset imdb_rating
imdb_rating

# Menghapus beberapa kolom yang tidak diperlukan
imdb_rating.drop(imdb_rating.columns[2:], axis=1, inplace=True)

imdb_rating

# Melakukan pengabungan dataset menjadi dataset imdb
imdb = pd.merge(imdb_movies, imdb_rating, on='imdb_title_id')
imdb = imdb[['imdb_title_id', 'title', 'genre', 'weighted_average_vote']]

# Melakukan filter data, dengan menghapus film yang ratingnya di bawah 7.0
imdb = imdb.drop(imdb[imdb.weighted_average_vote < 7.0].index)

# Melihat isi dataset imdb
imdb

# Mengetahui skala rating yang digunakan
imdb.describe()

# Melihat informasi dataset
imdb.info()

# Melihat nilai null pada dataset
imdb.isnull().sum()

# Melakukan sort dengan imdb_title_id sebagai patokan utama
imdb_fix = imdb.sort_values('imdb_title_id', ascending=True)
imdb_fix

imdb_fix.describe()

#Melihat Persebaaran Data Genre
imdb_fix_copy = imdb_fix.copy()
imdb_fix_copy.genre = imdb_fix_copy.genre.str.split(", ", expand = True)
imdb_fix_copy['genre'].value_counts().plot.bar()

# Mengetahui jumlah id dan judul
print('Jumlah id movie: ', len(imdb_fix.imdb_title_id.unique()))
print('Jumlah judul movie: ', len(imdb_fix.title.unique()))

# Membuat duplikat
preparation=imdb_fix
preparation = preparation.drop_duplicates('imdb_title_id')
preparation

# Melakukan konversi data menjadi list
movieId = preparation['imdb_title_id'].tolist()
movieTitle = preparation['title'].tolist()
movieGenre = preparation['genre'].tolist()
 
print(len(movieId))
print(len(movieTitle))
print(len(movieGenre))

# Membuat dictionary untuk data
imdbNew = pd.DataFrame({
    'imdb_title_id': movieId,
    'title': movieTitle,
    'genre': movieGenre
})
imdbNew

# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer()
 
# Melakukan perhitungan idf pada data genre
tf.fit(imdbNew['genre']) 
 
# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names()

# Melakukan fit lalu ditransformasikan ke bentuk matrix
tfidf_matrix = tf.fit_transform(imdbNew['genre']) 
 
# Melihat ukuran matrix tfidf
tfidf_matrix.shape

# Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()
tfidf_matrix.todense()

# Membuat dataframe untuk melihat tf-idf matrix
# Kolom diisi dengan genre
# Baris diisi dengan judul movie/film
 
pd.DataFrame(
    tfidf_matrix.todense(), 
    columns=tf.get_feature_names(),
    index=imdbNew.title
).sample(22, axis=1).sample(10, axis=0)

# Menghitung cosine similarity pada matrix tf-idf
cosine_sim = cosine_similarity(tfidf_matrix) 
cosine_sim

# Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa judul film
cosine_sim_df = pd.DataFrame(cosine_sim, index=imdbNew['title'], columns=imdbNew['title'])
print('Shape:', cosine_sim_df.shape)
 
# Melihat similarity matrix pada setiap film
cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

# Membuat fungsi rekomendasi film
def movie_recommendations(movieTitle, similarity_data=cosine_sim_df, items=imdb_fix[['title', 'genre']], k=10):
    # Mengambil data dengan menggunakan argpartition untuk melakukan partisi secara tidak langsung sepanjang sumbu yang diberikan    
    # Dataframe diubah menjadi numpy
    # Range(start, stop, step)
    index = similarity_data.loc[:,movieTitle].to_numpy().argpartition(
        range(-1, -k, -1))
    
    # Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]
    
    # Drop movieTitle agar anime yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(movieTitle, errors='ignore')
 
    return pd.DataFrame(closest).merge(items).head(k)

imdbNew[imdbNew.title.eq('Pengalila')]

# Mendapatkan rekomendasi film yang mirip dengan 'Pengalila'
movie_recommendations('Pengalila')