# -*- coding: utf-8 -*-
"""Salinan dari Copy of Machine_Learning_Terapan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vPcz_epcKqDhrcNjCPX3Q58JNlPg5Rvz

**1. Connect,install dan unduh dataset pada kaggle menggunakan API**
"""

#Confirm API kaggle
from google.colab import files
files.upload()

#Install kaggle dan download dataset dari kaggle
!pip install -q kaggle
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download -d meetnagadia/share-price-of-top-electric-car-company

"""**2. Import library**"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
# %matplotlib inline

import zipfile
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import Dense, LSTM

"""**3. Menyiapkan Dataset**"""

#Variable local_zip berisi direktori lokasi file zip disimpan
local_zip = '/content/share-price-of-top-electric-car-company.zip'

#Proses ekstrak file zip
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content/share-price-of-top-electric-car-company')
zip_ref.close()

#Memasukkan isi /content/share-price-of-top-electric-car-company/Top EV Company/BMW/bmw.csv kedalam variable base_dir
base_dir = '/content/share-price-of-top-electric-car-company/Top EV Company/BMW/bmw.csv'

"""**4.Pemahaman Data (Data Understanding)**"""

#Memuat Data pada sebuah Dataframe menggunakan pandas
data = pd.read_csv(base_dir)

#Memuat isi dataset (baris dan kolom)
data.shape

# Memuat informasi dataframe
data.info()

# Menghitung jumlah null pada setiap kolom
data.isnull().sum()

# Menghitung jumlah data kosong pada setiap kolom
data.isna().sum()

#Memuat 10 data pertama
data.head(10)

#Memuat 10 data terakhir
data.tail(10)

# Memuat deskripsi setiap kolom dataframe
data.describe()

#Memuat 5 informasi awal dan akhir dataframe
data

"""**5. Visualisasi Data**"""

#Memvisualkan Harga dibukanya saham BMW (Open)
plt.figure(figsize=(16,6))
plt.title('Open Price History')
plt.plot(data['Date'], data['Open'])
plt.xlabel('Date')
plt.ylabel('Open Price')
plt.show()

#Memvisualkan Harga tertinggi saham BMW (High)
plt.figure(figsize=(16,6))
plt.title('High Price History')
plt.plot(data['Date'], data['High'])
plt.xlabel('Date')
plt.ylabel('High Price')
plt.show()

#Memvisualkan Harga terendah saham BMW (Low)
plt.figure(figsize=(16,6))
plt.title('Low Price History')
plt.plot(data['Date'], data['Low'])
plt.xlabel('Date')
plt.ylabel('Low Price')
plt.show()

#Memvisualkan Harga ditutupnya saham BMW (Close)
plt.figure(figsize=(16,6))
plt.title('Close Price History')
plt.plot(data['Date'], data['Close'])
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.show()

#Memvisualkan Harga Adjusted close saham BMW (Adj Close)
plt.figure(figsize=(16,6))
plt.title('Adj Close History')
plt.plot(data['Date'], data['Adj Close'])
plt.xlabel('Date')
plt.ylabel('Adj Close Price')
plt.show()

#Memvisualkan jumlah sekuritas yang diperdagangkan selama periode waktu tertentu (Volume)
plt.figure(figsize=(16,6))
plt.title('Volume Price History')
plt.plot(data['Date'], data['Volume'])
plt.xlabel('Date')
plt.ylabel('Volume Price')
plt.show()

"""**6. Persiapan Data (Data Preparation)**"""

# Buat Data Frame baru yang isinya hanya komom High
dataDf = data.filter(['High'])

# Memuat deskripsi setiap kolom dataframe
dataDf.describe()

# Memuat informasi dataframe
dataDf.info()

#Memuat 10 data pertama
dataDf.head(10)

#Memuat 10 data terakhir
dataDf.tail(10)

# Ubah dataframe ke numpy array
dataset = dataDf.values
# Mendaoatkan nomor baris unruk training
training_data_len = int(np.ceil( len(dataset) * .95 ))

training_data_len

# Membuat training data set 
# Membuat scaled training data set
train_data = dataset[0:int(training_data_len), :]
# Membagi dataset keadalam x_train dan y_train
x_train = []
y_train = []

for i in range(60, len(train_data)):
    x_train.append(train_data[i-60:i, 0])
    y_train.append(train_data[i, 0])
    if i<= 61:
        print(x_train)
        print(y_train)
        print()

#Normalisasi
scaler = MinMaxScaler(feature_range=(0,1))
x_train = scaler.fit_transform(x_train)

# Merubah x_train dan y_train ke numpy arrays 
x_train, y_train = np.array(x_train), np.array(y_train)

# Reshape data
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
# x_train.shape

"""**7. Pembuatan dan evaluasi model**"""

# Pembuatan model LSTM
model = Sequential()
model.add(LSTM(128, return_sequences=True, input_shape= (x_train.shape[1], 1)))
model.add(LSTM(64, return_sequences=False))
model.add(Dense(256))
model.add(Dense(128))
model.add(Dense(64))
model.add(Dense(25))
model.add(Dense(1))

# Compile model
model.compile(optimizer='adam', loss='mean_squared_error')

# Latih model
model.fit(x_train, y_train, batch_size=1, epochs=25)

# Membuat testing data set
# Membuat array yang baru dengan isi nilai yang sudah discale dari index 1543 hingga 2002
test_data = dataset[training_data_len - 60: , :]
# Membuat data sets x_test dan y_test
x_test = []
y_test = dataset[training_data_len:, :]
for i in range(60, len(test_data)):
    x_test.append(test_data[i-60:i, 0])

x_test = scaler.transform(x_test)

# Merubah data ke numpy array
x_test = np.array(x_test)

# Reshape data
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1 ))

# Mendapatkan nilai model prediksi harga 
predictions = model.predict(x_test)

# Mendapatkan root mean squared error (RMSE)
rmse = np.sqrt(np.mean(((predictions - y_test) ** 2)))
rmse

# Plot data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions
# Visualisasi data
plt.figure(figsize=(16,6))
plt.title('Model')
plt.xlabel('Date')
plt.ylabel('High Price)')
plt.plot(train['High'])
plt.plot(valid[['High', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')
plt.show()

# Menunjukkan harga yang valid dan harga prediksi
valid